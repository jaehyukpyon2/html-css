box-sizing: 
- border-box: width의 값이 padding + border까지 합친 값으로 계산된다.

div태그의 style로서 background-image가 적용 되어 있고, div태그의 크기가 width/height 500px일 때, 
background-size를 10% 하는 것과 50px로 하는 것과 차이는 X.
background-image를 지정할 때는 무조건 자기 자신의 div 요소에 height가 지정되어 있어야 한다. 부모에 height가 지정되어 있어도 소용 없음. (이미지 안뜸 ㅠ)

position
- fixed: 자리 차지 안 함. 즉 다른 요소가 한칸씩 이동. viewport를 기준으로 위치 잡음, fixed를 적용하는순간 자치 자지 안 함
- absolute: static이 아닌 부모/자손 요소의 padding 값은 무시하고 그 위로 올라 탄다, but margin/border영역은 침범하지 못한다. (absolute를 적용하는 순간 top/left같은 속성 안 줘도 자리 차지 안 함.)

부모 컨테이너가 flex일 경우...
- flex-direction:
    - row이고, flex-wrap이 wrap일 경우, align-content가 기본값인 stretch가 아닌 다른 값이 적용되어 있다면, align-items를 건들여도 적용되지 않는다. 
    - nowrap일 경우, align-content가 안 먹는다
    - wrap이고, align-content가 stretch가 아닐 경우, align-items를 변경해도 안 먹는다 
- flex-directio 이 row이면, flex-item들에 width가 설정되어 있지 않다면, flex-item에 채워져 있는 content 영역만큼만 width를 차지하도록 변경된다. 
    - 만약 column이라면, width는 부모 컨테이너에 꽉 찬다.


block요소는 width 값을 주지 않으면 기본적으로 부모 요소의 가로 사이즈를 꽉 채워서 들어간다.

first-child => 무조건 '맨 앞'에 있어야 한다.
div p:first-child 일 경우, 이렇게 되어 있다고 해도 적용 안 된다.
<div><h5></h5><p></p><p></p></div>

flex-item에 적용되는 flex-basis의 크기 보다, 그냥 flex-item에 적용된 width 속성의 크기가 더 커도 무시되고 flex-basis에 적용된 크기 값이 적용

box-sizing이 border-box일 경우, flex-basis에 적용된 값이 border + padding + content width 까지 포함되어서 계산된다. 